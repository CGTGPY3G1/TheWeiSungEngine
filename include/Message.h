#pragma once
#ifndef WS_MESSAGE_H
#define WS_MESSAGE_H
namespace WeiSungEngine {
	enum MessageScope {
		MESSAGE_SCOPE_NULL = -1,
		MESSAGE_SCOPE_GLOBAL = 0,
		MESSAGE_SCOPE_GAMEOBJECT,
		MESSAGE_SCOPE_GAMEOBJECT_AND_ANCESTORS,
		MESSAGE_SCOPE_GAMEOBJECT_AND_CHILDREN,
		MESSAGE_SCOPE_COMPONENTS,
		MESSAGE_SCOPE_PHYSICS_SYSTEM
	};

	enum MessageType {
		MESSAGE_TYPE_VOID = 0,
		MESSAGE_TYPE_POSITION_UPDATE,
		MESSAGE_TYPE_SCALE_UPDATE,
		MESSAGE_TYPE_ROTATION_UPDATE,
		MESSAGE_TYPE_COLLISION_STARTED,
		MESSAGE_TYPE_COLLISION_STOPPED,
		MESSAGE_TYPE_REGISTER_RIGIDBODY,
		MESSAGE_TYPE_UNREGISTER_RIGIDBODY,
		MESSAGE_TYPE_REGISTER_COLLIDER,
		MESSAGE_TYPE_UNREGISTER_COLLIDER,
		MESSAGE_TYPE_REGISTER_JOINT,
		MESSAGE_TYPE_UNREGISTER_JOINT,
		MESSAGE_TYPE_UPDATE_COLLISION_FILTER,
		MESSAGE_TYPE_UPDATE_COLLISION_CATEGORY,
		MESSAGE_TYPE_UPDATE_COLLISION_MASK
	};

	enum MessageDataType {
		MESSAGE_NULL_DATA_TYPE = -1,
		MESSAGE_COLLIDER_DATA_TYPE = 0,
		MESSAGE_RIGIDBODY_DATA_TYPE,
		MESSAGE_TRANSFORM_DATA_TYPE
	};

	class Message {
	public:
		Message() {}
		Message(const MessageScope & messageScope) : scope(messageScope) {}
		Message(const MessageScope & messageScope, const MessageType & messageType, void * messageData) : scope(messageScope), type(messageType), data(messageData) {}
		MessageScope scope = MESSAGE_SCOPE_GLOBAL;
		MessageType type = MESSAGE_TYPE_VOID;
		void * data;
	};
}
#endif // !WS_MESSAGE_H
